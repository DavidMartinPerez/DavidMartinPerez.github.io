{"version":3,"sources":["FileUpload.js","App.js","serviceWorker.js","index.js"],"names":["FileUpload","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","uploadValue","react_default","a","createElement","value","props","max","className","type","onChange","onUpload","Component","App","user","pictures","handleAuth","bind","assertThisInitialized","handleLogout","handleUpload","_this2","firebase","auth","onAuthStateChanged","setState","database","ref","on","snapshot","concat","val","provider","GoogleAuthProvider","signInWithPopup","then","result","console","log","email","catch","err","signOut","e","_this3","file","target","files","storageRef","storage","name","child","put","percentage","bytesTransferred","totalBytes","error","getDownloadURL","url","record","photoURL","displayName","image","push","set","src","width","alt","onClick","src_FileUpload","map","picture","reverse","renderLoginButton","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d268f04.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass FileUpload extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            uploadValue: 0\r\n        };\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                <progress value={ this.props.uploadValue } max=\"100\">\r\n                    { this.props.uploadValue }\r\n                </progress>\r\n                <br />\r\n                <input className=\"fileUpload\" type=\"file\" onChange={ this.props.onUpload } />\r\n                <br />\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default FileUpload;","import React, { Component } from 'react';\nimport firebase from 'firebase';\nimport './App.css';\nimport FileUpload from './FileUpload';\n\nclass App extends Component {\n    constructor (){\n        super();\n        this.state = {\n            user: null,\n            pictures: [],\n            uploadValue: 0\n        };\n\n        this.handleAuth = this.handleAuth.bind(this);\n        this.handleLogout = this.handleLogout.bind(this)\n        this.handleUpload = this.handleUpload.bind(this)\n    }\n\n    componentWillMount() {\n        firebase.auth().onAuthStateChanged(user => {\n            this.setState({ user })\n        });\n\n        firebase.database().ref('pictures').on('child_added', snapshot => {\n            this.setState({\n                pictures: this.state.pictures.concat(snapshot.val())\n            });\n        })\n    }\n\n    //SignIn\n    handleAuth () {\n        const provider = new firebase.auth.GoogleAuthProvider();\n\n        firebase.auth().signInWithPopup(provider)\n            .then( result => { console.log(`${result.user.email} ha iniciado sesión`) })\n            .catch( err => console.log(err) )\n    }\n    //deslogeare\n    handleLogout() {\n        firebase.auth().signOut()\n            .then( result => { console.log(`${result.user.email} ha cerrado sesión`) })\n            .catch( err => console.log(err) )\n    }\n    //Subir fichero\n    handleUpload (e) {\n        const file = e.target.files[0];\n        const storageRef = firebase.storage().ref( `/photo/${file.name}` );\n        var task = storageRef.child(`${file.name}`).put(file);\n\n        task.on( 'state_changed', ( snapshot ) => {\n            let percentage = ( snapshot.bytesTransferred / snapshot.totalBytes ) * 100;\n            this.setState({\n                uploadValue: percentage\n            });\n        }, ( error ) => {\n            console.log(error);\n        }, () => {\n            storageRef.child(file.name).getDownloadURL().then((url) => {\n                const record = {\n                    photoURL: this.state.user.photoURL,\n                    displayName: this.state.user.displayName,\n                    image: url\n                }\n                const dbRef = firebase.database().ref('pictures');\n                const newPicture = dbRef.push();\n                newPicture.set(record)\n            });\n        });\n    }\n    //Render boton\n    renderLoginButton () {\n        //Logeado\n        if(this.state.user){\n            return (\n                <div>\n                    <img src={this.state.user.photoURL} width=\"350\" alt={this.state.user.displayName} />\n                    <p>Hola {this.state.user.displayName}</p>\n                    <button onClick={this.handleLogout}> Salir</button>\n                    <FileUpload onUpload={this.handleUpload} />\n\n                    {\n                        this.state.pictures.map( picture  => (\n                            <div className=\"subida\">\n                                <div className=\"subida__user\">\n                                    <img className=\"subida__fotoUsuario\" src={picture.photoURL} alt={picture.displayName} />\n                                    <span className=\"subida__nombreUsuario\">{picture.displayName}</span>\n                                </div>\n                                <img className=\"subida__fotoSubida\" src={picture.image} alt=\"\"/>\n                            </div>\n                        )).reverse()\n                    }\n                </div>\n            )\n        } else{\n            return ( <button onClick={this.handleAuth}> Login con google </button> )\n        }\n        // No logeado\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"\">\n                    <h2>FakeGram</h2>\n                </header>\n                <div className=\"App-intro\">\n                    { this.renderLoginButton() }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport firebase from 'firebase';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfirebase.initializeApp({\n    apiKey: \"AIzaSyA_cD99g2wypo3Jxb5jnQJs9gP5PxM4yog\",\n    authDomain: \"fakegram-3cfc2.firebaseapp.com\",\n    databaseURL: \"https://fakegram-3cfc2.firebaseio.com\",\n    projectId: \"fakegram-3cfc2\",\n    storageBucket: \"fakegram-3cfc2.appspot.com\",\n    messagingSenderId: \"936070948045\"\n});\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}