{"version":3,"sources":["components/weatherLocation/location.js","components/weatherLocation/weatherData/weatherExtraInfo.js","components/weatherLocation/weatherData/weatherTemperature.js","components/weatherLocation/weatherData/index.js","services/transformWeather.js","constans/weathers.js","constans/api_url.js","services/getUrlWeatherByCity.js","components/weatherLocation/index.js","components/locationList.js","components/forecastItem/index.js","services/getUrlWeatherForeCast.js","services/transformForecast.js","components/forecastExtended.js","App.js","serviceWorker.js","index.js"],"names":["Location","_ref","city","react_default","a","createElement","className","prototype","PropTypes","string","isRequired","WeatherExtraInfo","humidity","wind","concat","icons","default","cloud","cloudy","rain","windy","snow","thunder","drizzle","getWeatherIcons","temporary","icon","WeatherTemperature","temperature","weatherState","react_weathericons_lib_default","name","size","WeatherData","_ref$data","data","weatherTemperature","weatherExtraInfo","shape","number","transforWeather","weather_data","kelvin","_weather_data$main","main","temp","speed","resultado","id","getWeatherState","weather","convert","from","to","toFixed","api_key","getUrlWeatherByCity","api_weather","dataError","WeatherLocation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleUpdate","state","fetch","then","resolve","json","newWeater","setState","catch","err","prevProps","prevState","onWeatherLocationClick","_this$state","onClick","weatherLocation_location","weatherData","index_es","Component","LocationList","cities","onSelectedLocation","map","weatherLocation","key","handleWeatherLocationClick","allWeatherLocationComponents","array","func","ForecastItem","weekDay","hour","getUrlWeatherForeCast","transformForecast","list","filter","item","moment","unix","dt","utc","format","ForecastExtended","updateCity","forecastData","days","forecast","forecastItem","nextProps","renderForecastItemDays","App","handleSelectedLocation","console","log","handleSnackbarClose","openSnackbar","message","lib","AppBar_default","position","color","Toolbar_default","Typography_default","variant","xs","md","locationList","Paper_default","elevation","forecastExtended","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6WAKMA,SAAW,SAAAC,GAAgB,IAAZC,EAAYD,EAAZC,KAQjB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,UAAMH,MAMlBF,EAASO,UAAY,CACjBL,KAAMM,IAAUC,OAAOC,YAGZV,QCRAW,SAbU,SAAAV,GAAA,IAAIW,EAAJX,EAAIW,SAAUC,EAAdZ,EAAcY,KAAd,OACrBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAhB,YAAAQ,OAA8CF,EAA9C,OACAT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAhB,YAAAQ,OAA8CD,EAA9C,0BCOFE,EAAQ,CACVC,QAAS,YACTC,MAAO,QACPC,OAAQ,SACRC,KAAM,OACNC,MAAO,QACPC,KAAM,OACNC,QAAS,mBACTC,QAAS,eAGTC,EAAkB,SAAEC,GAEpB,IAAIC,EAAOX,EAAMU,GAIjB,OAFMC,IAAOA,EAAOX,EAAMC,SAEnBU,GASIC,EAnCY,SAAA1B,GAAA,IAAI2B,EAAJ3B,EAAI2B,YAAaC,EAAjB5B,EAAiB4B,aAAjB,OACvB1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAcE,UAAU,QAAQyB,KAAMP,EAAgBK,GAAeG,KAAK,OAC1E7B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,GAAAQ,OAAmCc,IACnCzB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAAhB,WCAF2B,EAAc,SAAAhC,GAA+D,IAAAiC,EAAAjC,EAA3DkC,KAAQP,EAAmDM,EAAnDN,YAAaC,EAAsCK,EAAtCL,aAAchB,EAAwBqB,EAAxBrB,KAAMD,EAAkBsB,EAAlBtB,SAG7D,OAAQT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACnBH,EAAAC,EAAAC,cAAE+B,EAAF,CACIR,YAAcA,EACdC,aAAeA,IAEnB1B,EAAAC,EAAAC,cAAEgC,EAAF,CAAmBzB,SAAWA,EAAWC,KAAOA,MAIxDoB,EAAY1B,UAAY,CACpB4B,KAAM3B,IAAU8B,MAAM,CAClBV,YAAapB,IAAUC,OAAOC,WAC9BmB,aAAcrB,IAAUC,OAAOC,WAC/BE,SAAUJ,IAAU+B,OAAO7B,WAC3BG,KAAML,IAAUC,OAAOC,cAIhBuB,yBCeAO,EAlBS,SAAAC,GAAgB,IArBxBC,EAsBJX,EAASU,EAATV,KAD4BY,EAETF,EAAaG,KAAhChC,EAF4B+B,EAE5B/B,SAAUiC,EAFkBF,EAElBE,KACVC,EAAUL,EAAa5B,KAAvBiC,MACFjB,EAnBc,SAAAY,GACpB,IAAIM,ECXsB,MDapBC,EAAOP,EAAPO,GASN,OAPIA,EAAK,IAAMD,ECVW,UDWjBC,EAAK,IAAMD,ECVM,UDWjBC,EAAK,IAAMD,EChBM,ODiBjBC,EAAK,IAAMD,EChBM,ODiBjBC,EAAK,IAAMD,ECnBM,MDoBjBC,EAAK,MAAMD,ECrBM,UDuBnBA,EAOcE,CAAgBR,EAAaS,QAAQ,IAW1D,MARW,CACPnB,OACAnB,WACAgB,aA/BQc,EA0BgBG,EAzBjBM,IAAQT,GAAQU,KAAK,KAAKC,GAAG,KAAKC,QAAQ,IA+BjDzB,eACAhB,KAAI,GAAAC,OAAKgC,EAAL,UEvCCS,EAAU,mCCeRC,EAba,SAAEtD,GAE1B,IAAIuD,EAQJ,OANW,MAARvD,IAECuD,EAAW,GAAA3C,ODPa,iDCOb,OAAAA,OAA4BZ,EAA5B,WAAAY,OAA0CyC,IAIlDE,GCALC,EAAY,CACd9B,aAAc,GACdC,aHZ0B,MGa1BjB,SAAU,IACVC,KAAM,WAmEK8C,cA7DX,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAoBVQ,aAAe,WAAM,IAEXlE,EAAS2D,EAAKQ,MAAdnE,KAEFuD,EAAcD,EAAoBtD,GAEtCoE,MAAMb,GAAac,KAAM,SAAAC,GACrB,OAAOA,EAAQC,SAChBF,KAAM,SAAApC,GAEL,IAAMuC,EAAYlC,EAAgBL,GAElC0B,EAAKc,SAAS,CACVxC,KAAMuC,MAGXE,MAAO,SAAAC,GAENhB,EAAKc,SAAS,CACVxC,KAAMuB,EACNxD,KAAM,+BAzCC,IAGPA,EAAS0D,EAAT1D,KAHO,OAKf2D,EAAKQ,MAAQ,CACTnE,OACAiC,KAAM,MAPK0B,mFAafG,KAAKI,0DAGUU,EAAWC,qCA+BtB,IACIC,EAA2BhB,KAAKJ,MAAhCoB,uBADJC,EAEmBjB,KAAKK,MAApBlC,EAFJ8C,EAEI9C,KAAMjC,EAFV+E,EAEU/E,KAEd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsB4E,QAAUF,GACzC7C,EAAOhC,EAAAC,EAAAC,cAAE8E,EAAF,CAAWjF,KAAOA,IAAYC,EAAAC,EAAAC,cAAA,wBACrC8B,EAAOhC,EAAAC,EAAAC,cAAE+E,EAAF,CAAcjD,KAAOA,IAAahC,EAAAC,EAAAC,cAAEgF,EAAA,EAAF,CAAmBrD,KAAM,aAxDtDsD,aCbxBC,SAAe,SAAAtF,GAAsC,IAAlCuF,EAAkCvF,EAAlCuF,OAAQC,EAA0BxF,EAA1BwF,mBAkB7B,OACItF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAbkB,SAAAkF,GAAM,OACvCA,EAAOE,IAAK,SAACxF,GAAD,OAEJC,EAAAC,EAAAC,cAACsF,EAAD,CACIC,IAAQ1F,EACRA,KAASA,EACT8E,uBAA2B,kBAVR,SAAE9E,GACjCuF,EAAmBvF,GAS0B2F,CAA4B3F,QAQnE4F,CAA6BN,MAM3CD,EAAahF,UAAY,CACrBiF,OAAQhF,IAAUuF,MAAMrF,WACxB+E,mBAAoBjF,IAAUwF,KAAKtF,YAExB6E,QCdAU,EAlBM,SAAAhG,GAAA,IAAGiG,EAAHjG,EAAGiG,QAASC,EAAZlG,EAAYkG,KAAMhE,EAAlBlC,EAAkBkC,KAAlB,OACjBhC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,aAAAS,OAASoF,EAAT,QAAApF,OAAuBqF,EAAvB,UACAhG,EAAAC,EAAAC,cAAE+E,EAAF,CAAcjD,KAAMA,MCObiE,EAbe,SAAElG,GAE5B,IAAIuD,EAQJ,OANW,MAARvD,IAECuD,EAAW,GAAA3C,OLNc,kDKMd,OAAAA,OAA6BZ,EAA7B,WAAAY,OAA2CyC,IAInDE,mBCMI4C,UAdW,SAAElE,GAAF,OACtBA,EAAKmE,KAAKC,OAAO,SAAAC,GAAI,OACsB,IAAtCC,IAAOC,KAAKF,EAAKG,IAAIC,MAAMT,QACU,KAAtCM,IAAOC,KAAKF,EAAKG,IAAIC,MAAMT,QACW,KAAtCM,IAAOC,KAAKF,EAAKG,IAAIC,MAAMT,SAC5BT,IAAI,SAAAc,GAAI,MACP,CACIN,QAASO,IAAOC,KAAKF,EAAKG,IAAIC,MAAMC,OAAO,QAC3CV,KAAMM,IAAOC,KAAKF,EAAKG,IAAIC,MAAMT,OACjChE,KAAMK,EAAgBgE,QCmFnBM,cArFX,SAAAA,IAAc,IAAAjD,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8C,IACVjD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgD,GAAA3C,KAAAH,QAiCJ+C,WAAa,SAAA7G,GAEToE,MAAM8B,EAAsBlG,IAAOqE,KAC/B,SAAApC,GAAI,OAAKA,EAAKsC,SAChBF,KACE,SAAA9B,GACI,IAAMN,EAAOkE,EAAkB5D,GAE/BoB,EAAKc,SAAS,CAAEqC,aAAc7E,OAvCtC0B,EAAKQ,MAAO,CACR2C,aAAc,KACdC,KAAM,MALApD,wFAWW,IAEbmD,EAAiBhD,KAAKK,MAAtB2C,aAiBR,OAbmB,MAAhBA,EACUA,EAAatB,IAAK,SAAAwB,GAAQ,OAC/B/G,EAAAC,EAAAC,cAAE8G,EAAF,CACIjB,QAAUgB,EAAShB,QACnB/D,KAAO+E,EAAS/E,KAChBgE,KAAOe,EAASf,KAChBP,IAAG,GAAA9E,OAAMoG,EAAShB,QAAf,KAAApF,OAA0BoG,EAASf,UAIrChG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAgBH,EAAAC,EAAAC,cAAEgF,EAAA,EAAF,CAAmBrD,KAAM,kDAuBrEgC,KAAK+C,WAAW/C,KAAKJ,MAAM1D,wDAILkH,GAEnBA,EAAUlH,OAAS8D,KAAKJ,MAAM1D,OAE7B8D,KAAKW,SAAS,CAAEqC,aAAc,OAE9BhD,KAAK+C,WAAWK,EAAUlH,wCAIzB,IACGA,EAAS8D,KAAKJ,MAAd1D,KAER,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,gCACgCJ,GAEhCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACT0D,KAAKqD,kCA3EI/B,aCIzBE,UAAS,CACX,YACA,cACA,YACA,oBAsEW8B,cAjEX,SAAAA,IAAc,IAAAzD,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsD,IAEVzD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwD,GAAAnD,KAAAH,QASJuD,uBAAyB,SAACrH,GACtBsH,QAAQC,IAAI,4BAA8BvH,GAE1C2D,EAAKc,SAAS,CAAEzE,UAdN2D,EAiBd6D,oBAAsB,WAClBF,QAAQC,IAAI,SACZ5D,EAAKc,SAAS,CAAEgD,cAAc,KAf9B9D,EAAKQ,MAAQ,CACTnE,KAAM,KACN0H,QAAS,kFACTD,cAAc,GAPR9D,wEAsBL,IACG3D,EAAS8D,KAAKK,MAAdnE,KACR,OACIC,EAAAC,EAAAC,cAAA,WASAF,EAAAC,EAAAC,cAACwH,EAAA,KAAD,KACI1H,EAAAC,EAAAC,cAACwH,EAAA,IAAD,KACI1H,EAAAC,EAAAC,cAACyH,EAAA1H,EAAD,CAAQ2H,SAAS,SAASC,MAAM,aAC5B7H,EAAAC,EAAAC,cAAC4H,EAAA7H,EAAD,KACID,EAAAC,EAAAC,cAAC6H,EAAA9H,EAAD,CAAY+H,QAAQ,QAAQH,MAAM,WAAlC,mBAMZ7H,EAAAC,EAAAC,cAACwH,EAAA,IAAD,KACI1H,EAAAC,EAAAC,cAACwH,EAAA,IAAD,CAAKO,GAAI,GAAIC,GAAI,GACblI,EAAAC,EAAAC,cAACiI,EAAD,CACI9C,OAASA,EACTC,mBAAqBzB,KAAKuD,0BAGlCpH,EAAAC,EAAAC,cAACwH,EAAA,IAAD,CAAKO,GAAI,GAAIC,GAAI,GACblI,EAAAC,EAAAC,cAACkI,EAAAnI,EAAD,CAAOoI,UAAW,GACdrI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACTJ,EAAOC,EAAAC,EAAAC,cAAEoI,EAAF,CAAmBvI,KAAOA,IAAYC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,sCAxD7DgF,aCREoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7I,EAAAC,EAAAC,cAAC4I,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/E,KAAK,SAAAgF,GACjCA,EAAaC","file":"static/js/main.8039f6d7.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './style.css'\r\n\r\nconst Location = ( { city } ) => {\r\n    // Destructuring\r\n    //const { city } = props;\r\n\r\n    //Forma est√°ndar\r\n    //const city = props != null ? props.city : 'Mordor';\r\n\r\n\r\n    return (\r\n        <div className=\"locationCont\">\r\n            <h2>{ city }</h2>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nLocation.prototype = {\r\n    city: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Location;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './style.css'\r\n\r\nconst WeatherExtraInfo = ( { humidity, wind } ) => (\r\n    <div className=\"weatherExtraInfoCont\">\r\n        <span className=\"extraInfoText\">{ `Humedad: ${humidity}% ` }</span>\r\n        <span className=\"extraInfoText\">{ `Vientos: ${wind} ` }</span>\r\n    </div>\r\n)\r\n\r\n\r\nWeatherExtraInfo.propTypes = {\r\n    humidity: PropTypes.number.isRequired,\r\n    wind: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default WeatherExtraInfo;","import React from 'react';\r\nimport WeatherIcons from 'react-weathericons';\r\nimport PropTypes from 'prop-types';\r\nimport './style.css'\r\n\r\nconst WeatherTemperature = ( { temperature, weatherState } ) => (\r\n    <div className=\"weatherTemperatureCont\">\r\n        <WeatherIcons className=\"wicon\" name={getWeatherIcons(weatherState)} size=\"2x\" />\r\n        <span className=\"temperature\">{ `${temperature}` }</span>\r\n        <span className=\"temperatureType\">C¬∫</span>\r\n    </div>\r\n)\r\n\r\n\r\nconst icons = {\r\n    default: \"day-sunny\",\r\n    cloud: \"cloud\",\r\n    cloudy: \"cloudy\",\r\n    rain: \"rain\",\r\n    windy: \"windy\",\r\n    snow: \"snow\",\r\n    thunder: \"day-thunderstorm\",\r\n    drizzle: \"day-showers\",\r\n}\r\n\r\nlet getWeatherIcons = ( temporary ) => {\r\n\r\n    let icon = icons[temporary];\r\n\r\n    if ( !icon ) icon = icons.default;\r\n\r\n    return icon;\r\n\r\n}\r\n\r\nWeatherTemperature.propTypes = {\r\n    temperature: PropTypes.string.isRequired,\r\n    weatherState: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default WeatherTemperature;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport WeatherExtraInfo from './weatherExtraInfo'\r\nimport WeatherTemperature from './weatherTemperature'\r\n\r\nimport './style.css'\r\n\r\n                       //Doble destructuring de un objecto compuesto de otro objecto\r\nconst WeatherData = ( { data: { temperature, weatherState, wind, humidity } } ) => {\r\n\r\n\r\n    return (<div className=\"weatherDataCont\">\r\n        < WeatherTemperature\r\n            temperature={ temperature }\r\n            weatherState={ weatherState }\r\n        />\r\n        < WeatherExtraInfo humidity={ humidity } wind={ wind } />\r\n    </div>)\r\n}\r\n\r\nWeatherData.prototype = {\r\n    data: PropTypes.shape({\r\n        temperature: PropTypes.string.isRequired,\r\n        weatherState: PropTypes.string.isRequired,\r\n        humidity: PropTypes.number.isRequired,\r\n        wind: PropTypes.string.isRequired,\r\n    })\r\n}\r\n\r\nexport default WeatherData;","\r\nimport convert from 'convert-units';\r\n\r\nimport { SUN, CLOUDY, RAIN, THUNDER, DRIZZLE, SNOW } from './../constans/weathers'\r\n\r\n\r\nconst getTemp = kelvin => {\r\n    let temp = convert(kelvin).from(\"K\").to(\"C\").toFixed(0)\r\n\r\n    return temp;\r\n}\r\n\r\nconst getWeatherState = weather_data => {\r\n    let resultado = SUN;\r\n\r\n    let { id } = weather_data\r\n\r\n    if( id < 300 ) resultado = THUNDER\r\n    else if( id < 400 ) resultado = DRIZZLE\r\n    else if( id < 600 ) resultado = RAIN\r\n    else if( id < 700 ) resultado = SNOW\r\n    else if( id < 800 ) resultado = SUN\r\n    else if( id < 900 ) resultado = CLOUDY\r\n\r\n    return resultado;\r\n}\r\n\r\nconst transforWeather = weather_data => {\r\n    const { name } = weather_data;\r\n    const { humidity, temp } = weather_data.main;\r\n    const { speed } = weather_data.wind;\r\n    const weatherState = getWeatherState(weather_data.weather[0]);\r\n    const temperature = getTemp(temp)\r\n\r\n    let data = {\r\n        name,\r\n        humidity,\r\n        temperature,\r\n        weatherState,\r\n        wind: `${speed} m/s`\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nexport default transforWeather;","export const CLOUD          = \"cloud\";\r\nexport const CLOUDY         = \"cloudy\";\r\nexport const SUN            = \"sun\";\r\nexport const RAIN           = \"rain\";\r\nexport const SNOW           = \"snow\";\r\nexport const FOG            = \"fog\";\r\nexport const WINDY          = \"windy\";\r\nexport const THUNDER        = \"thunder\";\r\nexport const DRIZZLE        = \"drizzle\";","export const api_key = \"725a90bb28ddb602c8ee974e85a8b8dc\"\r\nexport const url_base_weather = \"http://api.openweathermap.org/data/2.5/weather\"\r\nexport const url_base_forecast = \"http://api.openweathermap.org/data/2.5/forecast\"","import { api_key, url_base_weather } from '../constans/api_url'\r\n\r\nconst getUrlWeatherByCity = ( city ) => {\r\n\r\n    let api_weather\r\n\r\n    if(city != null){\r\n\r\n        api_weather = `${url_base_weather}?q=${city}&appid=${api_key}`\r\n\r\n    }\r\n\r\n    return api_weather;\r\n}\r\n\r\nexport default getUrlWeatherByCity;","import React, { Component } from 'react'\r\nimport { CircularProgress } from '@material-ui/core'\r\n//import PropTypes from 'prop-types'\r\n\r\nimport Location from './location'\r\nimport WeatherData from './weatherData'\r\nimport transforWeather from './../../services/transformWeather'\r\nimport getUrlWeatherByCity from './../../services/getUrlWeatherByCity'\r\nimport { SUN } from '../../constans/weathers'\r\n\r\nimport './style.css'\r\n\r\nconst dataError = {\r\n    temperature: -37,\r\n    weatherState: SUN,\r\n    humidity: 100,\r\n    wind: \"999 m/s\"\r\n}\r\n\r\n\r\nclass WeatherLocation extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const { city } = props;\r\n\r\n        this.state = {\r\n            city,\r\n            data: null\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.handleUpdate()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        //Solo se ejecuta cuando hay una actualizacion\r\n    }\r\n\r\n\r\n    handleUpdate = () => {\r\n\r\n        let { city } = this.state;\r\n\r\n        let api_weather = getUrlWeatherByCity(city)\r\n\r\n        fetch(api_weather).then( resolve => {\r\n            return resolve.json();\r\n        }).then( data => {\r\n\r\n            const newWeater = transforWeather(data);\r\n\r\n            this.setState({\r\n                data: newWeater\r\n            })\r\n\r\n        }).catch( err => {\r\n\r\n            this.setState({\r\n                data: dataError,\r\n                city: \"Error en el Servidor...\"\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const { onWeatherLocationClick } = this.props\r\n        const { data, city } = this.state\r\n\r\n        return (\r\n            <div className=\"weatherLocationCont\" onClick={ onWeatherLocationClick }>\r\n                { data ? < Location city={ city } /> : <h1>Cargando..</h1> }\r\n                { data ? < WeatherData data={ data } /> :  < CircularProgress size={50} /> }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default WeatherLocation;\r\n","//Componente funcional\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport WeatherLocation from './weatherLocation';\r\nimport \"./style.css\"\r\n\r\nconst LocationList = ( { cities, onSelectedLocation } ) => {\r\n\r\n    const handleWeatherLocationClick = ( city ) => {\r\n        onSelectedLocation(city)\r\n    }\r\n\r\n    const allWeatherLocationComponents = cities => (\r\n        cities.map( (city) =>\r\n            (\r\n                <WeatherLocation\r\n                    key = { city }\r\n                    city = { city }\r\n                    onWeatherLocationClick = { () => handleWeatherLocationClick( city ) }\r\n                />\r\n            )\r\n        )\r\n    )\r\n\r\n    return (\r\n        <div className=\"locationList\">\r\n            { allWeatherLocationComponents(cities) }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nLocationList.prototype = {\r\n    cities: PropTypes.array.isRequired,\r\n    onSelectedLocation: PropTypes.func.isRequired,\r\n}\r\nexport default LocationList;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport WeatherData from '../weatherLocation/weatherData'\r\n\r\nconst ForecastItem = ({ weekDay, hour, data }) => (\r\n    <div>\r\n        <h2>{ `${weekDay} -  ${hour} hrs `}</h2>\r\n        < WeatherData data={data} />\r\n    </div>\r\n)\r\n\r\nForecastItem.propTypes = {\r\n    weekDay: PropTypes.string.isRequired,\r\n    hour: PropTypes.number.isRequired,\r\n    data: PropTypes.shape({\r\n        temperature: PropTypes.string.isRequired,\r\n        weatherState: PropTypes.string.isRequired,\r\n        humidity: PropTypes.number.isRequired,\r\n        wind: PropTypes.string.isRequired,\r\n    })\r\n}\r\n\r\nexport default ForecastItem","import { api_key, url_base_forecast } from '../constans/api_url'\r\n\r\nconst getUrlWeatherForeCast = ( city ) => {\r\n\r\n    let api_weather\r\n\r\n    if(city != null){\r\n\r\n        api_weather = `${url_base_forecast}?q=${city}&appid=${api_key}`\r\n\r\n    }\r\n\r\n    return api_weather;\r\n}\r\n\r\nexport default getUrlWeatherForeCast;","import moment from 'moment'\r\nimport 'moment/locale/es'\r\nimport transforWeather from './transformWeather';\r\n\r\nconst transformForecast = ( data ) => (\r\n    data.list.filter(item => (\r\n        (moment.unix(item.dt).utc().hour() === 6 ||\r\n        moment.unix(item.dt).utc().hour() === 12 ||\r\n        moment.unix(item.dt).utc().hour() === 18) ? true : false\r\n    )).map(item => (\r\n        {\r\n            weekDay: moment.unix(item.dt).utc().format('dddd'),\r\n            hour: moment.unix(item.dt).utc().hour(),\r\n            data: transforWeather(item)\r\n        }\r\n    ))\r\n)\r\n\r\nexport default transformForecast","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { CircularProgress } from '../../node_modules/@material-ui/core';\r\n\r\nimport ForecastItem from './forecastItem';\r\nimport './style.css'\r\nimport getUrlWeatherForeCast from '../services/getUrlWeatherForeCast';\r\nimport transformForecast from '../services/transformForecast';\r\n\r\nclass ForecastExtended extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state ={\r\n            forecastData: null,\r\n            days: null\r\n        }\r\n    }\r\n\r\n\r\n\r\n    renderForecastItemDays() {\r\n\r\n        const { forecastData } = this.state;\r\n\r\n        let result = null;\r\n\r\n        if(forecastData != null){\r\n            result = forecastData.map( forecast => (\r\n                < ForecastItem\r\n                    weekDay={ forecast.weekDay }\r\n                    data={ forecast.data }\r\n                    hour={ forecast.hour }\r\n                    key={ `${forecast.weekDay}_${forecast.hour}` }\r\n                    />)\r\n            )\r\n        }else{\r\n            result = <div className=\"centerLoading\">< CircularProgress size={50} /></div>\r\n        }\r\n\r\n        return result\r\n\r\n    }\r\n\r\n    updateCity = city => {\r\n\r\n        fetch(getUrlWeatherForeCast(city)).then(\r\n            data => (data.json())\r\n        ).then(\r\n            weather_data => {\r\n                const data = transformForecast(weather_data)\r\n\r\n                this.setState({ forecastData: data })\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.updateCity(this.props.city)\r\n\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        //Se ejecuta cuando haya un cambio de en el props\r\n        if(nextProps.city !== this.props.city){\r\n\r\n            this.setState({ forecastData: null })\r\n\r\n            this.updateCity(nextProps.city)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { city } = this.props\r\n\r\n        return(\r\n            <div>\r\n                <h2 className=\"forecast-title\">\r\n                    Pron√≥stico extendido para { city }\r\n                </h2>\r\n                <div className=\"forecast-list\">\r\n                    { this.renderForecastItemDays() }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nForecastExtended.propTypes ={\r\n    city: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default ForecastExtended;","import React, { Component } from 'react';\nimport { Grid, Row, Col } from 'react-flexbox-grid'\nimport Paper from '@material-ui/core/Paper'\nimport AppBar from '@material-ui/core/AppBar'\nimport Typography from '@material-ui/core/Typography'\nimport Toolbar from '@material-ui/core/Toolbar'\n//import Snackbar from '@material-ui/core/Snackbar';\n\nimport LocationList from './components/locationList'\nimport ForecastExtended from \"./components/forecastExtended\"\nimport './App.css';\nimport './components/style.css'\n\nconst cities = [\n    \"Malaga,es\",\n    \"Zaragoza,es\",\n    \"Madrid,es\",\n    \"Buenos Aires,ar\"\n]\n\nclass App extends Component {\n\n    constructor() {\n\n        super()\n\n        this.state = {\n            city: null,\n            message: \"¬°Bienvenido a mi aplicacci√≥n del tiempo hecha en ReactJS con Material UI!\",\n            openSnackbar: true\n        }\n    }\n\n    handleSelectedLocation = (city) => {\n        console.log(\"handleSelectedLocation ->\" + city)\n\n        this.setState({ city })\n    }\n\n    handleSnackbarClose = () => {\n        console.log(\"hgola\")\n        this.setState({ openSnackbar: false })\n    }\n\n    render() {\n        const { city } = this.state\n        return (\n            <div>\n            {/*< Snackbar\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                message={ message }\n                open={openSnackbar}\n                onClose={this.handleSnackbarClose}\n                autoHideDuration={3500}\n                disableWindowBlurListener={true}\n            />*/}\n            <Grid>\n                <Row>\n                    <AppBar position='sticky' color=\"secondary\">\n                        <Toolbar>\n                            <Typography variant='title' color='inherit'>\n                                Wheather app\n                            </Typography>\n                        </Toolbar>\n                    </AppBar>\n                </Row>\n                <Row>\n                    <Col xs={12} md={6}>\n                        <LocationList\n                            cities={ cities }\n                            onSelectedLocation={ this.handleSelectedLocation }\n                        />\n                    </Col>\n                    <Col xs={12} md={6}>\n                        <Paper elevation={4}>\n                            <div className=\"details\">\n                                { city ? < ForecastExtended city={ city } /> : <h2 className=\"forecast-title\">Selecciona una ciudad</h2>}\n                            </div>\n                        </ Paper>\n                    </Col>\n                </ Row>\n            </Grid>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}